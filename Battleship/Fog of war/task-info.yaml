type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = main.execute("A1");
            if (!output.contains("hit") || !output.contains("ship")) {
                return CheckResult.wrong("After hitting a ship you should print \"You hit a ship!\".");
            }

            matrix = getFieldMatrix(output);
            checkShot(matrix, "A1", output);

            String[] splittedOutput = output.split("ship");
            if (splittedOutput.length < 2) {
                return CheckResult.wrong("Two game fields were expected in the output.");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            findAllShips(matrix, new String[]{"A1 D1", "B9 D9", "F3 F7", "I2 J2", "J8 J10"});

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test1() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = main.execute("M1");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A11");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("E4");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("After missing a ship you should print \"You missed!\".");
            }

            String[] splittedOutput = output.split("missed");
            if (splittedOutput.length < 2) {
                return CheckResult.wrong("Two game field were expected in the output.");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkMissing(matrix, "E4", output);
            findAllShips(matrix, new String[]{"J3 J7", "C8 F8", "A1 C1", "H1 H3", "B5 C5"});

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test2() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("E5 F5").trim();
            findShipByCoordinates(getFieldMatrix(output), "E5 F5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("E8");
            checkShot(getFieldMatrix(output), "E8", output);

            if (!output.contains("hit") || !output.contains("ship")) {
                return CheckResult.wrong("After hitting a ship you should print \"You hit a ship!\".");
            }

            String[] splittedOutput = output.split("ship");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("Two game field were expected in the output. No one was found");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            findAllShips(matrix, new String[]{"J3 J7", "C8 F8", "A1 C1", "H1 H3", "E5 F5"});

            return CheckResult.correct();
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("hit")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a hit.\n" +
                        "You should print \"You hit a ship!\".");
            }

            if (output.toLowerCase().contains("missed")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You hit a ship!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("You should print \"X\" in " +
                    " coordinates where you hit the ship.");
            }
        }

        void checkMissing(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("missed")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a miss.\n" +
                        "You should print \"You missed!\".");
            }

            if (output.toLowerCase().contains("hit")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You missed!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m")) {
                throw new WrongAnswer("You should print \"M\" in " +
                    " coordinates where you missed.");
            }
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/Ship.java
  visible: true
  text: |-
    package battleship;

    public enum Ship {
        AIRCRAFT_CARRIER("Aircraft Carrier", 5),
        BATTLESHIP("Battleship", 4),
        SUBMARINE("Submarine", 3),
        CRUISER("Cruiser", 3),
        DESTROYER("Destroyer", 2);

        private final String name;
        private final int length;

        public String getName() {
            return name;
        }

        public int getLength() {
            return length;
        }

        Ship(String name, int length) {
            this.name = name;
            this.length = length;
        }
    }
  learner_created: true
- name: src/battleship/Board.java
  visible: true
  text: |
    package battleship;

    import java.util.Arrays;
    import java.util.Scanner;

    import static java.lang.Math.abs;

    public class Board {
        char[][] board = new char[10][10];
        public Board() {
            for (char[] row : board)
                Arrays.fill(row, '~');
        }

        public Position[] getShipPosition(Ship ship) {
            Position[] positions = new Position[2];
            boolean validShipPosition = false;

            while (!validShipPosition) {
                System.out.println("Enter the coordinates of the " + ship.getName() + " (" + ship.getLength() + " cells):");
                Scanner scanner = new Scanner(System.in);
                String pos1 = scanner.next();
                String pos2 = scanner.next();
                positions[0] = convertToPosition(pos1);
                positions[1] = convertToPosition(pos2);
                validShipPosition = isShipPositionValid(ship.getLength(), positions[0], positions[1]);
                if (!validShipPosition) {
                    System.out.println("Error! Invalid ship position, please try again.");
                }
            }
            return positions;
        }

        public void takeShot() {
            boolean validShotPosition = false;
            Position position = new Position();
            position.row = -1;
            position.col = -1;
            while (!isPositionOnBoard(position)) {
                Scanner scanner = new Scanner(System.in);
                String pos1 = scanner.next();
                position = convertToPosition(pos1);
                if (!isPositionOnBoard(position)) {
                    System.out.println("Error! You entered invalid coordinates! Try again:");
                }
            }
            if (board[position.row][position.col] == 'O') {
                board[position.row][position.col] = 'X';
                draw();
                System.out.println("You hit a ship!");
            } else {
                board[position.row][position.col] = 'M';
                draw();
                System.out.println("You missed!");
            }
        }

        public void addShipToBoard(Position position1, Position position2) {
            // Check if ship is horizontal or vertical
            // Horizontally oriented ship
            if (position1.row == position2.row) {
                // Change symbols to ship
                if (position1.col < position2.col) {
                    for (int i = position1.col; i <= position2.col; i++) {
                        board[position1.row][i] = 'O';
                    }
                }
                if (position1.col > position2.col) {
                    for (int i = position2.col; i <= position1.col; i++) {
                        board[position1.row][i] = 'O';
                    }
                }
            }
            // Vertically oriented ship
            if (position1.col == position1.col) {
                // Change symbols to ship
                if (position1.row < position2.row) {
                    for (int i = position1.row; i <= position2.row; i++) {
                        board[i][position1.col] = 'O';
                    }
                }
                if (position1.row > position2.row) {
                    for (int i = position2.row; i <= position1.row; i++) {
                        board[i][position1.col] = 'O';
                    }
                }
            }
        }

        private static Position convertToPosition(String stringPosition) {
            Position position = new Position();
            position.row = stringPosition.charAt(0) - 65;
            String column = stringPosition.substring(1);
            position.col = Integer.parseInt(column) - 1;
            return position;
        }

        private boolean isShipPresent(Position position1, Position position2) {
            // Check if ship is horizontal or vertical
            // Horizontally oriented ship
            if (position1.row == position2.row) {
                if (position1.col < position2.col) {
                    for (int i = position1.col; i <= position2.col; i++) {
                        if (board[position1.row][i] == 'O') {
                            return true;
                        }
                    }
                }
                if (position1.col > position2.col) {
                    for (int i = position2.col; i <= position1.col; i++) {
                        if (board[position1.row][i] == 'O') {
                            return true;
                        }
                    }
                }
            }
            // Vertically oriented ship
            if (position1.col == position1.col) {
                if (position1.row < position2.row) {
                    for (int i = position1.row; i <= position2.row; i++) {
                        if (board[i][position1.col] == 'O') {
                            return true;
                        }
                    }
                }

                if (position1.row > position2.row) {
                    for (int i = position2.row; i <= position1.row; i++) {
                        if (board[i][position1.col] == 'O') {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        private boolean isShipAdjacent(Position adjPosition1, Position adjPosition2) {
            // Reorder inputs if backwards
            int position1row = adjPosition1.row;
            int position1col = adjPosition1.col;
            int position2row = adjPosition2.row;
            int position2col = adjPosition2.col;

            if (adjPosition1.row > adjPosition2.row) {
                position1row = adjPosition2.row;
                position2row = adjPosition1.row;
            }
            if (adjPosition1.col > adjPosition2.col) {
                position1col = adjPosition2.row;
                position2col = adjPosition1.row;
            }
            // Check if ship is horizontal or vertical
            // Horizontally oriented ship
            if (position1row == position2row) {

                // First check if there is another ship in front or behind ship being placed
                try {
                    if (board[position1row][position1col - 1] == 'O' || board[position1row][position2col + 1] == 'O') {
                        return true;
                    }}
                catch (Exception e) {
                    // bleb
                }
                // Check if there is another ship beside ship being placed
                for (int i = position1col; i <= position2col; i++) {
                    Position adjacentPos = new Position();
                    adjacentPos.row = position1row + 1;
                    adjacentPos.col = i;
                    if (isPositionOnBoard(adjacentPos)) {
                        if (board[adjacentPos.row][adjacentPos.col] == 'O') {
                            return true;
                        }
                    }
                    adjacentPos.row = adjPosition1.row - 1;
                    if (isPositionOnBoard(adjacentPos)) {
                        if (board[adjacentPos.row][adjacentPos.col] == 'O') {
                            return true;
                        }
                    }
                }
            }
            // Vertically oriented ship
            if (position1col == position2col) {
                // First check if there is another ship in front or behind ship being placed
                try {
                    if (board[position1row - 1][position1col] == 'O' || board[position2row + 1][position1col] == 'O') {
                        return true;
                    }}
                catch (Exception e) {
                    // bleb
                }
                // Check if there is another ship beside ship being placed
                for (int i = position1row; i <= position2row; i++) {
                    Position adjacentPos = new Position();
                    adjacentPos.row = i;
                    adjacentPos.col = adjPosition1.col + 1;
                    if (isPositionOnBoard(adjacentPos)) {
                        if (board[adjacentPos.row][adjacentPos.col] == 'O') {
                            return true;
                        }
                    }
                    adjacentPos.col = adjPosition1.col - 1;
                    if (isPositionOnBoard(adjacentPos)) {
                        if (board[adjacentPos.row][adjacentPos.col] == 'O') {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        public void draw() {
            // Print column labels
            char rowLabel = 'A';
            System.out.println("  1 2 3 4 5 6 7 8 9 10");
            for (int row = 0; row < 10; row++) {
                // Print row labels
                System.out.print(rowLabel++ + " ");
                for (int col = 0; col < 10; col++) {
                    // Print board contents
                    System.out.print(board[row][col] + " ");
                }
                System.out.println();
            }
        }

        private boolean isShipPositionValid(int shipLength, Position position1, Position position2) {
            // Check if positions are in bounds
            if (!isPositionOnBoard(position1)) {
                //System.out.println("Out of bounds");
                return false;
            }
            if (!isPositionOnBoard(position2)) {
                //System.out.println("Out of bounds");
                return false;
            }

            // Check if diagonal somehow
            if (position1.row != position2.row && position1.col != position2.col) {
                //System.out.println("Diagonal");
                return false;
            }
            // Check if length correct
            if (position1.row == position2.row) {
                int inputLength = abs(position1.col - position2.col) + 1;
                if (inputLength != shipLength) {
                    //System.out.println("Wrong length");
                    return false;
                }
            }
            if (position1.col == position2.col) {
                int inputLength = abs(position1.row - position2.row) + 1;
                if (inputLength != shipLength) {
                    //System.out.println("Wrong length");
                    return false;
                }
            }

            // Check if position is occupied by another ship
            if (isShipPresent(position1, position2)) {
                //System.out.println("Occupied by another ship");
                return false;
            }


            // Check if position is adjacent to another ship
            if (isShipAdjacent(position1, position2)) {
                //System.out.println("Another ship adjacent");
                return false;
            }

            return true;
        }

        private static boolean isPositionOnBoard(Position position) {
            if (position == null) {
                return false;
            }
            else if (position.row < 0 || position.row > 9 || position.col < 0 || position.col > 9) {
                return false;
            }
            return true;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10596#comment
status: Solved
record: 7
